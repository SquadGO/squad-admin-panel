// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: players.sql

package sqlGen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getPlayer = `-- name: GetPlayer :one
SELECT player_id, name, eos_id, steam_id, first_seen, last_seen FROM players
WHERE player_id = $1 LIMIT 1
`

func (q *Queries) GetPlayer(ctx context.Context, playerID int64) (Player, error) {
	row := q.db.QueryRow(ctx, getPlayer, playerID)
	var i Player
	err := row.Scan(
		&i.PlayerID,
		&i.Name,
		&i.EosID,
		&i.SteamID,
		&i.FirstSeen,
		&i.LastSeen,
	)
	return i, err
}

const insertPlayer = `-- name: InsertPlayer :one
INSERT INTO players (name, eos_id, steam_id, last_seen)
VALUES ($1, $2, $3, $4)
RETURNING player_id
`

type InsertPlayerParams struct {
	Name     string             `json:"name"`
	EosID    string             `json:"eos_id"`
	SteamID  string             `json:"steam_id"`
	LastSeen pgtype.Timestamptz `json:"last_seen"`
}

func (q *Queries) InsertPlayer(ctx context.Context, arg InsertPlayerParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertPlayer,
		arg.Name,
		arg.EosID,
		arg.SteamID,
		arg.LastSeen,
	)
	var player_id int64
	err := row.Scan(&player_id)
	return player_id, err
}

const updatePlayerName = `-- name: UpdatePlayerName :exec
UPDATE players
SET name = $1
WHERE player_id = $1
`

func (q *Queries) UpdatePlayerName(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, updatePlayerName, name)
	return err
}
