// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: maps.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getMaps = `-- name: GetMaps :many
SELECT map_id, server_id, created_at, end_at, map_name, winner_name, winner_team_id, winner_tickets, loser_name, loser_team_id, loser_tickets FROM maps
`

func (q *Queries) GetMaps(ctx context.Context) ([]Map, error) {
	rows, err := q.db.Query(ctx, getMaps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Map
	for rows.Next() {
		var i Map
		if err := rows.Scan(
			&i.MapID,
			&i.ServerID,
			&i.CreatedAt,
			&i.EndAt,
			&i.MapName,
			&i.WinnerName,
			&i.WinnerTeamID,
			&i.WinnerTickets,
			&i.LoserName,
			&i.LoserTeamID,
			&i.LoserTickets,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMap = `-- name: InsertMap :one
INSERT INTO maps (server_id, created_at, end_at, map_name, winner_name, winner_team_id, winner_tickets, loser_name, loser_team_id, loser_tickets)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING map_id
`

type InsertMapParams struct {
	ServerID      *int32             `json:"server_id"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	EndAt         pgtype.Timestamptz `json:"end_at"`
	MapName       string             `json:"map_name"`
	WinnerName    *string            `json:"winner_name"`
	WinnerTeamID  *int32             `json:"winner_team_id"`
	WinnerTickets *int32             `json:"winner_tickets"`
	LoserName     *string            `json:"loser_name"`
	LoserTeamID   *int32             `json:"loser_team_id"`
	LoserTickets  *int32             `json:"loser_tickets"`
}

func (q *Queries) InsertMap(ctx context.Context, arg InsertMapParams) (int64, error) {
	row := q.db.QueryRow(ctx, insertMap,
		arg.ServerID,
		arg.CreatedAt,
		arg.EndAt,
		arg.MapName,
		arg.WinnerName,
		arg.WinnerTeamID,
		arg.WinnerTickets,
		arg.LoserName,
		arg.LoserTeamID,
		arg.LoserTickets,
	)
	var map_id int64
	err := row.Scan(&map_id)
	return map_id, err
}

const updateMap = `-- name: UpdateMap :exec
UPDATE maps
SET
  end_at = $2,
  winner_name = $3,
  winner_team_id = $4,
  winner_tickets = $5,
  loser_name = $6,
  loser_team_id = $7,
  loser_tickets = $8
WHERE map_id = $1
`

type UpdateMapParams struct {
	MapID         int64              `json:"map_id"`
	EndAt         pgtype.Timestamptz `json:"end_at"`
	WinnerName    *string            `json:"winner_name"`
	WinnerTeamID  *int32             `json:"winner_team_id"`
	WinnerTickets *int32             `json:"winner_tickets"`
	LoserName     *string            `json:"loser_name"`
	LoserTeamID   *int32             `json:"loser_team_id"`
	LoserTickets  *int32             `json:"loser_tickets"`
}

func (q *Queries) UpdateMap(ctx context.Context, arg UpdateMapParams) error {
	_, err := q.db.Exec(ctx, updateMap,
		arg.MapID,
		arg.EndAt,
		arg.WinnerName,
		arg.WinnerTeamID,
		arg.WinnerTickets,
		arg.LoserName,
		arg.LoserTeamID,
		arg.LoserTickets,
	)
	return err
}
